.Net Standard 2.0 kind of an interface allow to use the same library with different projects (core, framework, xamarin)
.Net Core 3.0

1 Start with the TRMDektopUI.Library project.

Right click on TRMDektopUI.Library and unload Project --> The TRMDektopUI.Library.csproj file has been unloaded from the solution.

Right clck, Edit. Delete the whole content. Type in:

<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>  
</Project>

Save it, close. Right click on TRMDektopUI.Library and reload it. From now on we can edit the csproj file while it is running.

Nuget packages (still listed in packages.config) are not installed anymore. 
Right click on the project --> Build. We get errors in the autogenerated AssemblyInfo.cs saying about duplicates.
Delete the Property/AssemblyInfo.cs file (which is not where the error lied, but the source of the other autogenerated file.)
Right click on the project --> Build. We get new errors. Among others, about nugetpackages.
Install the nugetpakages. Start with Microsoft.AspNet.WebApi.Client.
Right click on the project --> Build. Remaining errors on 'ConfigurationManager' does not exist.
Again, install a nugetpackage: System.Configuration.ConfigurationManager
Right click on the project --> Build. 0 Error, 1 Warning: In the app.config, the 'packages' element is not declared. So let's delete TRMDesktopUI.Library\packages.config.
Note, that int the .Net Framework we used Json nuget package. In .NET Standard 2.0 we do not need to install it, because it came togeather with Microsoft.AspNet.WebApi.Client nuget package.
We can delete the app.config, which is by the way only about Json config, so not needed.
Before that I build the solution and run it. Works fine, Tim had a file not found exception! The solution was to install System.Configuration.ConfigurationManager nugetpackage in TRMDektopUI (so not the project we are transferring to .core) project. (Where the App.config file is. /This is read by the TRMDesktopUI.Library.Api.APIHelper./) As I am doing this project later, the ConfigurationManager has a version which is compatible with core, so no problem raised up.






