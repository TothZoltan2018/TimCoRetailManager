.Net Standard 2.0 kind of an interface allow to use the same library with different projects (core, framework, xamarin)
.Net Core 3.0

CHAPTER 1.
Start with the TRMDektopUI.Library project.

Right click on TRMDektopUI.Library and unload Project --> The TRMDektopUI.Library.csproj file has been unloaded from the solution.

Right clck, Edit. Delete the whole content. Type in:

<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>  
</Project>

Save it, close. Right click on TRMDektopUI.Library and reload it. From now on we can edit the csproj file while it is running.

Nuget packages (still listed in packages.config) are not installed anymore. 
Right click on the project --> Build. We get errors in the autogenerated AssemblyInfo.cs saying about duplicates.
Delete the Property/AssemblyInfo.cs file (which is not where the error lied, but the source of the other autogenerated file.)
Right click on the project --> Build. We get new errors. Among others, about nugetpackages.
Install the nugetpakages. Start with Microsoft.AspNet.WebApi.Client.
Right click on the project --> Build. Remaining errors on 'ConfigurationManager' does not exist.
Again, install a nugetpackage: System.Configuration.ConfigurationManager
Right click on the project --> Build. 0 Error, 1 Warning: In the app.config, the 'packages' element is not declared. So let's delete TRMDesktopUI.Library\packages.config.
Note, that int the .Net Framework we used Json nuget package. In .NET Standard 2.0 we do not need to install it, because it came togeather with Microsoft.AspNet.WebApi.Client nuget package.
We can delete the app.config, which is by the way only about Json config, so not needed.
Before that I build the solution and run it. Works fine, Tim had a file not found exception! The solution was to install System.Configuration.ConfigurationManager nugetpackage in TRMDektopUI (so not the project we are transferring to .core) project. (Where the App.config file is. /This is read by the TRMDesktopUI.Library.Api.APIHelper./) As I am doing this project later, the ConfigurationManager has a version which is compatible with core, so no problem raised up.
----------------------------------------------------------------------------------------------------------------------------------

CHAPTER 2. TRMDataManager.Library project

If there were any references to other projects, than those also must be moved to .NET Standard 2.0

Right click on TRMDataManager.Library and unload Project --> The TRMDataManager.Library.csproj file has been unloaded from the solution.

Right clck, Edit. Delete the whole content. Type in:

<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>
</Project>

Right click on the project --> Build. We get errors:
Autogenerated AssemblyInfo.cs saying about duplicates. --> Instead of deleting the assemblyinfo file, we edit the csproj file:
Add a new PropertyGroup: 
<GenerateAssemblyInfo>false</GenerateAssemblyInfo>
This will prevent the assemblyinfo being generated automtically.
The type or namespace name 'SqlClient' does not exist in the namespace 'System.Data' (are you missing an assembly reference?)	TRMDataManager.Library	C:\Users\ZoliRege\source\repos\TimCoRetailManager\TRMDataManager.Library\Internal\DataAccess\SqlDataAccess.cs	Active	6
We need to install nuget package: System.Data.SqlClient v4.7.0, as Tim does. (The latest is 4.8.2)
Rebuild... New erros:
Error	CS0103	The name 'ConfigurationManager' does not exist in the current context	TRMDataManager.Library	C:\Users\ZoliRege\source\repos\TimCoRetailManager\TRMDataManager.Library\ConfigHelper.cs	Active	15

Error	CS0246	The type or namespace name 'ConfigurationErrorsException' could not be found (are you missing a using directive or an assembly reference?)	TRMDataManager.Library	C:\Users\ZoliRege\source\repos\TimCoRetailManager\TRMDataManager.Library\ConfigHelper.cs	Active	21

So add nugetpackage System.Configuration.ConfigurationManager the latest version 5.0.0. v4.6.0 (Tim did v4.6.0)

Something weird is here, I had now this error (Tim hasn't)
System.Reflection.TargetInvocationException: 'Exception has been thrown by the target of an invocation.'
Inner Exception
FileNotFoundException: Could not load file or assembly 'System.Configuration.ConfigurationManager, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.
This exception sems to be thrown when stepping into TRMDEsktopUI/App.xaml
Ok, I needed to install System.Configuration.ConfigurationManager nugetpackage in TRMDektopUI as written at the end of chapter 1.

I got Internal server error at Login.... Tim got an exception: FileNotFoundException: Could not load file or assembly 'System.Data.SQLClient 4.6.0.0
I cannot debug in TRMDataManager.Library.DataAccess.UserData.GetUserById(string Id) because I cannot step into SqlDataAccess.LoadData method because it returns ASAP with internal server error.

Tim installed nuget package: System.Data.SqlClient v4.7.0. An other exception has been thrown: FileNotFoundException: Could not load file or assembly 'Dapper 2.0.0.0
For me, still Internal server error at Login.
Tim went back to from 2.0.30 to the earlier dapper version which is in the TRMDataManager.Library packages.config. (Almost... 1.60.6, in the config was 1.60.1)
For me, both the installed version number and the one in the config file are the same (2.0.78)...
For him, the same error, but the version is 1.60.0.0. In the TRMDataManager there was no dapper installed. He does not install dapper, but System.Configuration.ConfigurationManager 4.6.0. Did not helped. So, he tried out installing dapper 1.60.6 to this project. 
For him its ok, for me at 2.0.78 the same error comes.
Ok, Let's install System.Configuration.ConfigurationManager 5.0.0.0 in TRMDataManager. WORKS FINALLY!!!

Conclusion from CHAPTER 1 and 2: It seems that the dll-s are not brought over from the libraries to our bin directory... The above can only be a temporary solution. The medicine in my case was to install ConfigurationManager nugetpackage in TRMDataManager. It goes fine without Dapper.

We do not need the TRMDataManager.Library packages.config. Delete it.

----------------------------------------------------------------------------------------------------------------------------------
CHAPTER 3 - TRMDataManager project
Unload the project. Since thre are a lot of change to do, we do not only edit csproj file. We create a new project and move the logic there and will delete the .net framework project.
So, Create a new ASP.NET Core 3.0 Web Application (Model-View-Controller) project under the API folder: TRMApi. Changenge Authentication: Individual User Acounts, Store user account in-app.
Set as startup project.
Launch it. We got build error: 
Error	NU1202	Package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 3.1.11 is not compatible with netcoreapp3.0 (.NETCoreApp,Version=v3.0). Package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 3.1.11 supports: netcoreapp3.1 (.NETCoreApp,Version=v3.1)	TRMApi	C:\Users\ZoliRege\source\repos\TimCoRetailManager\TRMApi\TRMApi.csproj		1
Let's change the the project .netcore vrsion to 3.1.
Launch it again. Works, an template default page is displayed.

appsettings.json replaces the framework's Web.config. It has a Connectionstring to a database which was created by EF for logins.
Let's create a new login database. Recreate the users.
Change the database name in the json file to ApiAuthDb
Launch, register tim@iamtimcorey.com, Pwd12345.
SqlException: Cannot open database "ApiAuthDb" requested by the login. Click on Apply Migrations button. Confirm account. Now we can login.
Database ApiAuthDb is now created.

Let's start bringing over our controllers.
AccountController in the framework was autogenerated for us. No own code there. So not needed.
HomeController is the only one autogenerated in core 3.0.
We create InventoryController. Simply copy the body of the original class and add the [authorize] attr.
We let the errors in and move to the next controller: So create ProductController. Add the [Authorize(Roles = "Cashier")] attribute to the class.
Do it for SaleController and UserController, too. Note, that in core the controllers inherit from ControllerBase calss. This is an MVC calss. API functionality is added by [ApiController] attribute.
Bringing over the Models:
AccountBindingModels, AccountViewModels, IdentityModels: These are from the authentication system. We will not bring them over.
Bring over the ApplicationUserModel and UserRolePairModel.
Add project reference to TRMDataManager.Library
Rebuild on TRMApi
Adding using statements in the controllers.
In UserController there is ApplicationDbContext. Its constructor requiers parameter in .netcore. UserStore and UserManager has different constructor, that does not accept type ApplicationUser.
There are many errors because the diff between framewrk and core... We change the controllers to correspond to core.

RequestContext.Principal.Identity.GetUserId(); fram ---------> core: string userId = User.FindFirstValue(ClaimTypes.NameIdentifier);

In UserController, instead of newing up the ApplicationDbContext, use Dependency Injection...
An then a lot of work to be compatible code with .net core.

In TRMDesktopUI.App.config originally was: <add key="api" value="https://localhost:44311/" /> we changed it to 5001.
In .net core we need to add roles to our authentication because ther aren't any:
In TRMApi.Startup: .AddRoles<IdentityRole>()
Actually creating the roles and userroles:
We can put this code anywhere, but for now into HomeController.Privacy()

Go to the solution and Set startup projects to multiple. Let the TRMApi and the TRMDesktopUI be Start, the rest None.
We committed into git even if at login we got "Not Found" errormessage:
a33c2b7e52ddd56cd2dc72bab51d78ab544cee54	Zoltan Toth <toth.tozso.zoltan@gmail.com>	2/12/2021 10:23:15 PM +00:00	Upgrading to .NET Core: From WebAPI to ASP.NET Core API
----------------------------------------------------------------------------------------------------------------------------------
New video started: Upgrading to .NET Core: Adding JWT Authentication to Our API

We got 404 message: endpoint 5001/Token/... not found.
Problems: 
Authentication is not working at all. (Can get product data even if we are not logged in with a Cashier role (In the browser /api/Product)). 
ConfigurationManager does not returns the connectionstring.
	We changed the SqlDataAccess to receive an IConfiguration parameter, which solves connectionstring problem... We need to modify all places where SqlDataAccess is called.
	Build TRMDataManager.Library. Succeeds.
	This IConfiguration comes from the .net core web api. The dependency injection sysetem is built into it.
Authentication: in the framework, we used token based authentication. We logged in and get a token to indicate that we are authorized. By default in .net core we don't have it. We need to use nuget packages for it:
Microsoft.AspNetCore.Authentication.JwtBearer (JWT --> Json WebToken) v5.0.3 is not compatible with .netcore 3.1. I needed to install older, such the one Tim used some month earlier... v3.1.0
System.IdentityModel.Tokens.Jwt
Wa added a new MVC controller: TokenController. This is the authentication side.
The token receiver side is the Startup.cs. We add Authentication to ConfigureServices. It evaluates the token (sent by the TokenController) to check 
 if the user is authenticated and the token has not expired.
 
We could not login. Internal server error... A new userid has been created and that was not in the TRMData User Table. We put in manually and login is ok.
Then tried to step in usermanagement. Not found exception. Not finding route /api/User/Admin/GetAllUsers, despite it is in the UserController... For better debugging, put back swagger again.
So install nuget packages in TRMApi: Swashbuckle.AspNetCore v5.0.0, Swashbuckle.Core v5.6.0, Swashbuckle.AspNetCore.Swagger v5.0.0, vSwashbuckle.AspNetCore.SwaggerGen v5.0.0, Swashbuckle.AspNetCore.SwaggerUI v5.0.0, Swashbuckle.AspNetCore.Annotations v5.0.0
Adding many things in Startup.cs
Swagger fails becasue in v2.0 all the posts and gets in the controllers needs to be marked with [HttpGet]/[HttpPost] attribute. (The naming convention of a method is not working anymore).
The endpoints routes in core are additive. It consists of the route attribute of the class and the route attribute of the methods. Therefore the latter was modified not having duplcated paths.
----------------------------------------------------------------------------------------------------------------------------------

CHAPTER 3 - TRMDesktopUI project

We reviewed what packages are in the packages.config. Checked what project is referenced (TRMDesktopUI.Library).
Unload the project. Edit csproj file. Delete the whole content. Enter:
<Project Sdk="Microsoft.NET.Sdk.WindowsDesktop">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>netcoreapp3.0</TargetFramework>
    <UseWPF>true</UseWPF>  
  </PropertyGroup>
</Project>

Delete Properties/AssemblyInfo.cs. This will be autogenerated.
Add back the reference to TRMDesktopUI.Library. (It is now in the csproj file.)
Now we added nuget packages to AutoMapper and to Caliburn Micro.
Caliburn Micro v3.2.0 does not work with .net core 3. We changed Package source from nuget.org to Caliburn Micro Package Source. The link was from on of the comments... Checkbox true: include rereleases. So install Caliburn.Micro (and not Caliburn.Micro.Core) v4.0.100-alpha. (Old, but the same as Tim did.)
Build: In ShelViewModel there are a lot of error. IHandle Interface has been change: No more Handle method. Instead HandleAsync...





